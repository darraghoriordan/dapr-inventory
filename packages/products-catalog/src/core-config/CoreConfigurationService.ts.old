/* eslint-disable @typescript-eslint/no-non-null-assertion */
import {DaprClient} from "@dapr/dapr";
import {Injectable} from "@nestjs/common";
import {ConfigService} from "@nestjs/config";
import {IsBoolean, IsDefined, IsInt, IsString} from "class-validator";
import CoreLoggerService from "../core-logger/CoreLoggerService";
import {ValidatedConfigurationService} from "./ValidatedConfigurationService";

@Injectable()
export class CoreConfigurationService extends ValidatedConfigurationService {
    constructor(
        private configService: ConfigService,
        private daprClient: DaprClient,
        private logger: CoreLoggerService
    ) {
        super();
    }

    public async getAllFromDapr(): Promise<Record<string, object>> {
        this.logger.log("getting all secrets");
        const secrets = await this.daprClient.secret.get(
            "daprinventory-secretstore",
            "appSecrets"
        );
        this.logger.log("secrets retrieved", secrets);
        return secrets as Record<string, object>;
    }
    @IsDefined()
    @IsInt()
    get webPort(): number {
        return Number.parseInt(
            this.configService.get<string>("core.webPort")!,
            10
        );
    }

    @IsDefined()
    @IsBoolean()
    get shouldLogForDevelopment(): boolean {
        return this.configService.get<string>("logging.nodeEnv") === "dev";
    }

    @IsDefined()
    @IsString()
    get appTitle(): string {
        return this.configService.get<string>("core.appTitle")!;
    }

    @IsDefined()
    @IsString()
    get nodeEnv(): string {
        return this.configService.get<string>("core.nodeEnv")!;
    }
}
