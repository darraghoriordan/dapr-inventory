version: "3.4"

services:
    # seq is a log viewing tool
    seq:
        image: datalust/seq:latest
    redis-state-store:
        image: redis:alpine
    zipkin:
        image: openzipkin/zipkin-slim

    rabbitmq:
        image: rabbitmq:3.10-management-alpine

    localstack:
        image: "localstack/localstack:0.14"
    otel-collector:
        image: ${REGISTRY:-daprinventory}/otelcollector:${TAG:-latest}
        build:
            context: ./packages/otel-collector
        depends_on:
            - grafana
            - pushgateway
    prometheus:
        image: prom/prometheus:v2.35.0
        restart: unless-stopped
        depends_on:
            - pushgateway
            - alertmanager
    alertmanager:
        image: prom/alertmanager:v0.24.0
        restart: unless-stopped
        depends_on:
            - pushgateway
    pushgateway:
        image: prom/pushgateway:v1.4.3
        restart: unless-stopped
    grafana:
        image: grafana/grafana:9.0.5
        restart: unless-stopped
        depends_on:
            - prometheus

    dapr-actor-placement:
        image: "daprio/dapr:1.8.0"
        depends_on:
            - seq
            - zipkin
            - redis-state-store
            - products-api-datastore-instance
            - inventory-api-postgres
            - localstack
            - otel-collector

    products-api-datastore-instance:
        image: amazon/dynamodb-local
        command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"
    inventory-api-postgres:
        image: postgres:14-alpine
        restart: "no"

    products-api:
        image: ${REGISTRY:-daprinventory}/products.api:${TAG:-latest}
        build:
            context: ./packages/products-api
        restart: on-failure
        depends_on:
            - dapr-actor-placement

    products-api-dapr: # dapr sidecar for products
        image: "daprio/daprd:1.8.0"
        restart: unless-stopped # important for local stack delays
        network_mode: "service:products-api" # this means it won't get it's own hostname and you can use the main service hostname like you would on k8s or whatever
        depends_on:
            - products-api

    inventory-api:
        image: ${REGISTRY:-daprinventory}/inventory.api:${TAG:-latest}
        restart: on-failure
        build:
            context: ./packages/inventory-api
        depends_on:
            - dapr-actor-placement

    inventory-api-dapr: # dapr sidecar for products
        image: "daprio/daprd:1.8.0"
        network_mode: "service:inventory-api"
        restart: unless-stopped # important for local stack delays
        depends_on:
            - inventory-api
    frontend-client:
        image: ${REGISTRY:-daprinventory}/frontend.client:${TAG:-latest}
        build:
            context: ./packages/frontend
    envoy-gateway:
        image: ${REGISTRY:-daprinventory}/envoygateway:${TAG:-latest}
        build:
            context: ./packages/envoy-gateway
        depends_on:
            - dapr-actor-placement
    envoy-gateway-dapr:
        image: "daprio/daprd:1.8.0"
        network_mode: "service:envoy-gateway"
        restart: unless-stopped # important for local stack delays
        depends_on:
            - envoy-gateway
