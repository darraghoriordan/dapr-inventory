version: "3.4"
volumes:
    di-dynamo-data:

services:
    redis-state-store:
        # redis pass is not really a secret here
        command: redis-server --requirepass redispass
        ports:
            - "5379:6379"
    seq:
        environment:
            - ACCEPT_EULA=Y
        ports:
            - "5340:80"
    zipkin:
        ports:
            - "5411:9411"
    rabbitmq:
        ports:
            - "5672:5672"
    prometheus:
        volumes:
            - ./.docker-compose/.persist/prometheus/runtime:/prometheus
            - ./packages/prometheus:/etc/prometheus
        command:
            - "--web.listen-address=0.0.0.0:9090"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            # - "--web.console.libraries=/etc/prometheus/console_libraries"
            # - "--web.console.templates=/etc/prometheus/consoles"
            # - "--storage.tsdb.retention.time=200h"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
            - "--web.enable-remote-write-receiver"
            - "--web.page-title=DaprInventoryTimeseries"
            - "--log.level=debug"
        expose:
            - "9000:9090"
    alertmanager:
        volumes:
            - ./packages/alertmanager:/etc/alertmanager
        command:
            - "--config.file=/etc/alertmanager/config.yml"
            - "--storage.path=/alertmanager"
        restart: unless-stopped
        expose:
            - "9093:9093"
    pushgateway:
        expose:
            - "9091:9091"
    grafana:
        volumes:
            - ./.docker-compose/.persist/grafana:/var/lib/grafana
            - ./packages/grafana:/etc/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=auser
            - GF_SECURITY_ADMIN_PASSWORD=apassword
            - GF_USERS_ALLOW_SIGN_UP=false
            - GF_DEFAULT_APP_MODE=development
            - GF_LOG_LEVEL=debug
            - TERM=linux
        expose:
            - 9000:3000
    otel-collector:
        command: ["--config=/etc/otel-collector-config.yaml"]
        ports:
            - "1888:1888" # pprof extension
            - "8888:8888" # Prometheus metrics exposed by the collector
            - "8889:8889" # Prometheus exporter metrics
            - "13133:13133" # health_check extension
            - "4317:4317" # OTLP gRPC receiver
            - "4318:4318" # OTLP http receiver
            - "55679:55679" # zpages extension
            - "5414:9411" # zipkin receiver
    localstack:
        container_name: localstack
        ports:
            - "4566:4566" # LocalStack Gateway
            - "4510-4560:4510-4560" # exte
            # - "127.0.0.1:4566:4566" # LocalStack Gateway
            # - "127.0.0.1:4510-4560:4510-4560" # external services port range
        environment:
            - DEBUG=${DEBUG-}
            - PERSISTENCE=${PERSISTENCE-}
            - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}
            - DOCKER_HOST=unix:///var/run/docker.sock
            - EAGER_SERVICE_LOADING=1
            - DEBUG=1
            - USE_LEGACY_PORTS=false
            - HOSTNAME_EXTERNAL=localstack
        volumes:
            - ./.docker-compose/.persist/localstack:/var/lib/localstack
            - /var/run/docker.sock:/var/run/docker.sock

    inventory-api-postgres:
        ports:
            - 5413:5432
        volumes:
            - ./packages/inventory-api/infrastructure/database-initialisation:/docker-entrypoint-initdb.d
            - ./.docker-compose/.persist/inventory-api-postgres:/var/lib/postgresql/data
        environment:
            # these are for the local instance - not secret
            - POSTGRES_DB=InventoryDb
            - POSTGRES_SCHEMA_NAME=InventoryApi
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres

    dapr-actor-placement:
        command: ["./placement", "-port", "50000", "-log-level", "debug"]
        ports:
            - "50000:50000"

    products-api-datastore-instance:
        user: root # this fixes WARNING: [sqlite] cannot open DB[41]: com.almworks.sqlite4java.SQLiteException: [14] unable to open database file
        working_dir: /home/dynamodblocal
        volumes:
            - ./.docker-compose/.persist/product-api-dynamo-data:/home/dynamodblocal/data
        ports:
            - 5412:8000

    products-api:
        environment:
            - DAPR_SIDECAR_HOST=products-api
            - DAPR_SIDECAR_PORT=3500
            - DAPR_API_SECRET="some-secret"
            - OPEN_TELEMETRY_APP_NAME="products-api-app"
            - OPEN_TELEMETRY_URL=http://otel-collector:4318/v1/traces
        ports:
            - "5101:80"
            - "3501:3500" # exposing dapr sidecar comms for testing
            - "50001:50001" # exposing dapr sidecar comms for testing

    products-api-dapr:
        command:
            [
                "./daprd",
                "-app-id",
                "products-api",
                "-app-port",
                "80",
                "-dapr-http-port",
                "3500",
                "-placement-host-address",
                "dapr-actor-placement:50000",
                "--enable-api-logging",
                "--log-level",
                "debug",
                "--log-as-json",
                "-components-path",
                "/dapr-meta/components",
                "-config",
                "/dapr-meta/configuration/main-config.yaml",
            ]
        volumes:
            - "./dapr:/dapr-meta"

    inventory-api:
        environment:
            - DAPR_SIDECAR_HOST=inventory-api
            - DAPR_SIDECAR_PORT=3500
            - DAPR_API_SECRET="some-secret"
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://0.0.0.0:80
            - OPEN_TELEMETRY_APP_NAME="inventory-api-app"
            - OPEN_TELEMETRY_URL=http://otel-collector:4317
        ports:
            - "5102:80"
            - "3502:3500" # exposing dapr sidecar comms for testing
            - "50002:50001" # exposing dapr sidecar comms for testing
        volumes:
            - "./packages/inventory-api/Infrastructure/Migrations:/migrations"

    inventory-api-dapr:
        command:
            [
                "./daprd",
                "-app-id",
                "inventory-api",
                "-app-port",
                "80",
                "-dapr-http-port",
                "3500",
                "-placement-host-address",
                "dapr-actor-placement:50000",
                "--enable-api-logging",
                "--log-level",
                "debug",
                "--log-as-json",
                "-components-path",
                "/dapr-meta/components",
                "-config",
                "/dapr-meta/configuration/main-config.yaml",
            ]
        volumes:
            - "./dapr:/dapr-meta"
    frontend-client:
        ports:
            - "5400:80"
    envoy-gateway:
        environment:
            # these env vars are used to build the container - you must rebuild if changed
            - ENVOY_INVENTORY_API_ADDRESS=inventory-api
            - ENVOY_INVENTORY_API_PORT=80
            - ENVOY_PRODUCTS_API_ADDRESS=products-api
            - ENVOY_PRODUCTS_API_PORT=80
            - ENVOY_DAPR_API_ADDRESS=127.0.0.1
            - ENVOY_PORT=80
            - ENVOY_TRACING_API_ADDRESS=otel-collector
        ports:
            - "5103:80"
            - "15202:8001" # envoy admin port
            - "50003:50001"

    envoy-gateway-dapr:
        command:
            [
                "./daprd",
                "-app-id",
                "envoy-gateway",
                "-app-port",
                "80",
                "-dapr-http-port",
                "3500",
                "-placement-host-address",
                "dapr-actor-placement:50000",
                "--enable-api-logging",
                "--log-level",
                "debug",
                "--log-as-json",
                "-components-path",
                "/dapr-meta/components",
                "-config",
                "/dapr-meta/configuration/main-config.yaml",
            ]
        volumes:
            - "./dapr:/dapr-meta"
